!pip install yfinance ta  --quiet
# Suppress warnings and reduce yfinance logging.
import warnings
warnings.filterwarnings("ignore")
import logging
logging.getLogger("yfinance").setLevel(logging.ERROR)

import yfinance as yf
import pandas as pd
import ta
import datetime

# Define the list of stocks using ticker symbols known to have valid data on Yahoo Finance.
# Problematic tickers (e.g., delisted or missing timezone) have been removed.
stock_tickers = {
    "Bharat Electronics Ltd.": "BEL.NS",
    "Bharti Airtel Ltd.": "BHARTIARTL.NS",
    "Bosch Ltd.": "BOSCHLTD.NS",
    "Coforge Ltd.": "COFORGE.NS",
    "Divi's Laboratories Ltd.": "DIVISLAB.NS",
    "Dixon Technologies (India) Ltd.": "DIXON.NS",
    "Federal Bank Ltd.": "FEDERALBNK.NS",
    "HCL Technologies Ltd.": "HCLTECH.NS",
    "Indian Hotels Co. Ltd.": "INDHOTEL.NS",
    "Info Edge (India) Ltd.": "NAUKRI.NS",
    "Infosys Ltd.": "INFY.NS",
    "Kalyan Jewellers India Ltd.": "KAJARIACER.NS",
    "Lupin Ltd.": "LUPIN.NS",
    "Mahindra & Mahindra Ltd.": "M&M.NS",
    "Oil India Ltd.": "OIL.NS",
    "Oracle Financial Services Software Ltd.": "OFSS.NS",
    "Persistent Systems Ltd.": "PERSISTENT.NS",
    "Siemens Ltd.": "SIEMENS.NS",
    "Sun Pharmaceutical Industries Ltd.": "SUNPHARMA.NS",
    "Tech Mahindra Ltd.": "TECHM.NS",
    "Trent Ltd.": "TRENT.NS",
    "Vedanta Ltd.": "VEDL.NS",
    "Voltas Ltd.": "VOLTAS.NS"
}

# Define the date range and time frame.
start_date = "2010-01-01"
end_date = datetime.datetime.today().strftime('%Y-%m-%d')  # Today's date
time_frame = "1d"  # Use "1d" for daily or "1wk" for weekly

# Set indicator thresholds.
adx_threshold = 40    # ADX threshold value.
wpr_threshold = -25   # Williams %R threshold value.
near_threshold = 20    # Allowed deviation for "near" condition.

# Prepare lists to store the stocks meeting each condition.
condition1_stocks = []
condition2_stocks = []

for name, ticker in stock_tickers.items():
    try:
        # Download historical data; progress=False removes progress bar output.
        data = yf.download(ticker, start=start_date, end=end_date, interval=time_frame, progress=False)
        if data.empty:
            # If no data is returned, skip this ticker.
            continue
        
        # Ensure the high, low, and close columns are 1-dimensional.
        high = data["High"].squeeze()
        low = data["Low"].squeeze()
        close = data["Close"].squeeze()
        
        # Calculate ADX and Williams %R using a 14-period window.
        adx_series = ta.trend.ADXIndicator(high=high, low=low, close=close, window=14).adx()
        wpr_series = ta.momentum.WilliamsRIndicator(high=high, low=low, close=close, lbp=14).williams_r()
        data["ADX"] = adx_series
        data["Williams_%R"] = wpr_series
        
        # Drop NaN values from the computed indicators.
        valid_adx = data["ADX"].dropna()
        valid_wpr = data["Williams_%R"].dropna()
        if valid_adx.empty or valid_wpr.empty:
            continue
        
        # Extract the latest valid indicator values and convert to floats.
        adx_val = float(valid_adx.iloc[-1])
        wpr_val = float(valid_wpr.iloc[-1])
        
        # Check Condition 1: ADX > 40 and Williams %R > -25.
        if (adx_val > adx_threshold) and (wpr_val > wpr_threshold):
            condition1_stocks.append(name)
        # Check Condition 2: Both indicators are within ±near_threshold of their thresholds.
        elif (abs(adx_val - adx_threshold) <= near_threshold) and (abs(wpr_val - wpr_threshold) <= near_threshold):
            condition2_stocks.append(name)
    except Exception:
        # Silently skip any ticker that raises an error.
        continue

# Output the results without any error messages.
print("Stocks meeting Condition 1 (ADX > 40 and Williams %R > -25):")
if condition1_stocks:
    for stock in condition1_stocks:
        print("-", stock)
else:
    print("None of the stocks meet Condition 1.")

print("\nStocks meeting Condition 2 (Indicators near ADX 40 and Williams %R -25 within ±{}):".format(near_threshold))
if condition2_stocks:
    for stock in condition2_stocks:
        print("-", stock)
else:
    print("None of the stocks meet Condition 2.")
